<template>
	<div id="app">
		<div class="flex justify-center">
			<div class="min-h-screen flex overflow-x-scroll py-12">
				<div v-for="column in columns" :key="column.title"
					class="bg-gray-100 rounded-lg px-3 py-3 column-width rounded mr-4">
					<div class="flex items-center flex-shrink-0 h-10 px-2">
						<p class="text-gray-700 font-semibold font-sans tracking-wide text-sm">{{ column.title }}</p>
						<span
							class="flex items-center justify-center w-5 h-5 ml-2 text-sm font-semibold text-indigo-500 bg-white rounded bg-opacity-30">
							{{ column.tasks.length }}
						</span>
						<button @click="openModal(column.title)"
							class="flex items-center justify-center w-6 h-6 ml-auto text-indigo-500 rounded hover:bg-indigo-500 hover:text-indigo-100">
							<svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6">
								</path>
							</svg>
						</button>
					</div>
					<!-- Draggable component comes from vuedraggable. It provides drag & drop functionality -->
					<draggable :list="column.tasks" :animation="200" ghost-class="ghost-card" group="tasks">
						<!-- Each element from here will be draggable and animated. Note :key is very important here to be unique both for draggable and animations to be smooth & consistent. -->
						<task-card v-for="(task) in column.tasks" :key="task.id" :task="task" class="mt-3 cursor-move"></task-card>
						<!-- </transition-group> -->
					</draggable>
				</div>
			</div>
		</div>
		<UModal v-model="isOpen">
			<UCard :ui="{ ring: '', divide: 'divide-y divide-gray-100 dark:divide-gray-800' }">
				<template #header>
					<h3 class="text-xl font-semibold text-gray-900 dark:text-white">
						Create new task
					</h3>
				</template>

				<UForm :schema="RegisterValidationSchema" :state="formState" class="space-y-4" @submit="onSubmit">
					<UFormGroup label="Title" name="title">
						<UInput v-model="formState.title" placeholder="Title" />
					</UFormGroup>

					<UFormGroup label="Type" name="type">
						<USelectMenu :options="typeTask" v-model="formState.type" />
					</UFormGroup>

					<UFormGroup label="Status" name="status">
						<USelectMenu :options="statusTask" v-model="formState.status" />
					</UFormGroup>

					<UFormGroup label="Content" name="content">
						<UTextarea v-model="formState.content" placeholder="Content" />
					</UFormGroup>

					<div>
						<UButton type="submit">
							Submit
						</UButton>
						<UButton color="white" variant="solid" type="button" class="ml-2" @click="closeModal">
							Cancel
						</UButton>
					</div>
				</UForm>
			</UCard>
		</UModal>
	</div>
</template>

<script>
import { VueDraggableNext } from 'vue-draggable-next'
import { RegisterValidationSchema } from '../schemas/AddEditTask'

export default {
	name: "App",
	components: {
		draggable: VueDraggableNext,
	},
	data() {
		return {
			columns: [
				{
					title: "Backlog",
					tasks: [
						{
							id: 1,
							title: "Add discount code to checkout page",
							date: "Sep 14",
							type: 1
						},
						{
							id: 2,
							title: "Provide documentation on integrations",
							date: "Sep 12"
						},
						{
							id: 3,
							title: "Design shopping cart dropdown",
							date: "Sep 9",
							type: 2
						},
						{
							id: 4,
							title: "Add discount code to checkout page",
							date: "Sep 14",
							type: 1
						},
						{
							id: 5,
							title: "Test checkout flow",
							date: "Sep 15",
							type: 3
						}
					]
				},
				{
					title: "In Progress",
					tasks: [
						{
							id: 6,
							title: "Design shopping cart dropdown",
							date: "Sep 9",
							type: 2
						},
						{
							id: 7,
							title: "Add discount code to checkout page",
							date: "Sep 14",
							type: 1
						},
						{
							id: 8,
							title: "Provide documentation on integrations",
							date: "Sep 12",
							type: 4
						}
					]
				},
				{
					title: "Review",
					tasks: [
						{
							id: 9,
							title: "Provide documentation on integrations",
							date: "Sep 12"
						},
						{
							id: 10,
							title: "Design shopping cart dropdown",
							date: "Sep 9",
							type: 2
						},
						{
							id: 11,
							title: "Add discount code to checkout page",
							date: "Sep 14",
							type: 1
						},
						{
							id: 12,
							title: "Design shopping cart dropdown",
							date: "Sep 9",
							type: 2
						},
						{
							id: 13,
							title: "Add discount code to checkout page",
							date: "Sep 14",
							type: 1
						}
					]
				},
				{
					title: "Done",
					tasks: [
						{
							id: 14,
							title: "Add discount code to checkout page",
							date: "Sep 14",
							type: 1
						},
						{
							id: 15,
							title: "Design shopping cart dropdown",
							date: "Sep 9",
							type: 2
						},
						{
							id: 16,
							title: "Add discount code to checkout page",
							date: "Sep 14",
							type: 1
						}
					]
				}
			],
			isOpen: false,
			formState: {
				title: null,
				type: null,
				status: null,
				content: null
			}
		};
	},
	methods: {
		openModal(statusValue) {
			this.isOpen = true;
			this.formState.status = statusValue;
		},
		closeModal() {
			this.isOpen = false;
		},
		onsubmit() {
		}
	}
};
</script>

<style lang="css" scoped>
.column-width {
	min-width: 320px;
	width: 320px;
}

/* Unfortunately @apply cannot be setup in codesandbox, 
  but you'd use "@apply border opacity-50 border-blue-500 bg-gray-200" here */
.ghost-card {
	opacity: 0.5;
	background: #F7FAFC;
	border: 1px solid #4299e1;
}
</style>